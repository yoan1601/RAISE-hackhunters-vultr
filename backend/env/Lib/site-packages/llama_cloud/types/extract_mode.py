# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ExtractMode(str, enum.Enum):
    FAST = "FAST"
    BALANCED = "BALANCED"
    PREMIUM = "PREMIUM"
    MULTIMODAL = "MULTIMODAL"
    ACCURATE = "ACCURATE"

    def visit(
        self,
        fast: typing.Callable[[], T_Result],
        balanced: typing.Callable[[], T_Result],
        premium: typing.Callable[[], T_Result],
        multimodal: typing.Callable[[], T_Result],
        accurate: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ExtractMode.FAST:
            return fast()
        if self is ExtractMode.BALANCED:
            return balanced()
        if self is ExtractMode.PREMIUM:
            return premium()
        if self is ExtractMode.MULTIMODAL:
            return multimodal()
        if self is ExtractMode.ACCURATE:
            return accurate()
