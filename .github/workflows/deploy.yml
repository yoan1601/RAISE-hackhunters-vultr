name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, yoan ]
  pull_request:
    branches: [ main, develop, yoan ]

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r backend/requirements.txt

      - name: Lint with flake8
        run: flake8 .
        working-directory: ./backend

      - name: Test with pytest
        run: pytest
        working-directory: ./backend

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('''**/package-lock.json''') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: cd frontend && npm install

      - name: Run tests
        run: cd frontend && npm test

      - name: Clean previous build artifacts
        run: rm -rf frontend/build

      - name: Build the React app
        run: cd frontend && npm run build

      - name: Lint with ESLint
        run: cd frontend && npm run lint

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  deploy:
    needs: [build-and-test-backend, build-and-test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ghcr.io/yoan1601/backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          # The context is the frontend directory, which now contains
          # the downloaded 'build' artifact from the previous job.
          context: ./frontend
          push: true
          tags: ghcr.io/yoan1601/frontend:${{ github.sha }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      - name: Create or Update Image Pull Secret
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=$REGISTRY_USER \
            --docker-password=$REGISTRY_TOKEN \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh $COMMIT_SHA